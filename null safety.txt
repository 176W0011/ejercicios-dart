//Null-safety = seguridad ante null es la ausencia de un valor
//no permitir que una variable apunte a null cuando se espera
//que este apuntando a un valor no-null
//Eliminar los "null pointer exceptions"


int number = 123;
int? numberNullable;
void main(){

   //nullable
   String name = giveMeAString(3);

   //null aware operator (?) = operador conciente de los null
  String lastname = "andres";
  print(lastname.length);


  //(!) casting awy nullability = ignorar qu es nullable y usar el tipo de no
  //nullable
 var shelf = Shelf();
 shelf.setBooks([]);
 shelf.clearBooks();
 shelf.printNumber0fBooks();
 shelf.setLibrary("Libreria de la esquina");
 shelf.printLibrary();
}

class Shelf{
  List<Book>? books;
   late final String library;
   String? address;

   printAddress() {
     var addressNotNull = address;
     if (addressNotNull != null) {
       print("Este estante esta ubicado en:" + addressNotNull);
     }
   }
  setLibrary(String library) {
    this.library = library;
  }

  printLibrary(){
    print("Este estante esta en :" + library);
  }
  setBooks(List<Book>? newBooks){
    this.books = newBooks;
  }
  printNumber0fBooks() {
    print(books!.length);
  }

  void clearBooks(){
    books = null;
  }
}
String giveMeAString(int n){
  if (n == 0){
    return 'zero';
  } else if (n < 0){
    throw ArgumentError('Negative values not allowed');
  }else{
    if (n> 1000){
      return 'big';
    } else {
      return n.toString();
    }
  }
}


class Book{
  int pages;
  int price;
  Book(this.pages, this.price);

  int givePrice(){
    int price;
    if (pages > 100){
      price = 10000;
    } else {
      price = 5000;
    }
    print(price);
    return price;
  }
  //type promotion = promocion del tipo
int priceWithDiscount([int? discount]){
    if (discount != null) {
      return this.price - discount; // int? -> int
    }

    return this.price;
}
}